"use strict";
/**
 * @module @truffle/preserve-to-ipfs
 */ /** */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Recipe = exports.defaultAddress = void 0;
const Preserve = __importStar(require("@truffle/preserve"));
const connect_1 = require("./connect");
const upload_1 = require("./upload");
exports.defaultAddress = "http://localhost:5001";
class Recipe {
    constructor(options) {
        this.name = "@truffle/preserve-to-ipfs";
        this.inputLabels = ["fs-target"];
        this.outputLabels = ["ipfs-cid"];
        this.address = options.address || exports.defaultAddress;
    }
    async *execute(options) {
        const { address } = this;
        const { inputs, controls } = options;
        const { update } = controls;
        yield* update({ message: "Preserving to IPFS..." });
        const ipfs = yield* connect_1.connect({ address, controls });
        const { source } = Preserve.Targets.normalize(inputs["fs-target"]);
        const { cid } = yield* upload_1.upload({ source, ipfs, controls });
        return { "ipfs-cid": cid };
    }
}
exports.Recipe = Recipe;
Recipe.help = "Preserve to IPFS";
//# sourceMappingURL=index.js.map
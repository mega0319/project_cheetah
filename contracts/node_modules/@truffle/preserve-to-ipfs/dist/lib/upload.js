"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upload = void 0;
const chalk_1 = __importDefault(require("chalk"));
const Preserve = __importStar(require("@truffle/preserve"));
const search_1 = require("./search");
const iter_tools_1 = require("iter-tools");
async function* upload(options) {
    const { source, ipfs, controls } = options;
    const { step } = controls;
    const task = yield* step({
        message: "Uploading..."
    });
    // depth-first search to add files to IPFS before parent directories
    const data = await iter_tools_1.asyncToArray(search_1.search({ source }));
    // define a dictionary of values for CIDs that are resolved asynchronously
    const values = {};
    values.root = yield* task.declare({ identifier: "Root CID" });
    for await (const { path } of data) {
        if (path === ".")
            continue;
        values[path] = yield* values.root.extend({ identifier: path });
    }
    const results = ipfs.addAll(data, {
        wrapWithDirectory: Preserve.Targets.Sources.isContainer(source)
    });
    let result;
    try {
        for await (result of results) {
            const { path, cid } = result;
            // path is prefixed with ./ to match the result format to the source format
            const value = values[`./${path}`];
            if (value) {
                yield* value.resolve({
                    resolution: { cid },
                    payload: cid.toString()
                });
            }
        }
    }
    catch (error) {
        yield* task.fail({ error });
    }
    yield* values.root.resolve({
        resolution: result,
        payload: chalk_1.default.bold(result.cid.toString())
    });
    yield* task.succeed();
    return result;
}
exports.upload = upload;
//# sourceMappingURL=upload.js.map
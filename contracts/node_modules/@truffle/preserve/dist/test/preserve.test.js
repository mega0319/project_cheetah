"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iter_tools_1 = require("iter-tools");
const preserve_1 = require("../lib/preserve");
const preserve_fixture_1 = require("./preserve.fixture");
const recipes = [preserve_fixture_1.simpleLoader, preserve_fixture_1.vowelsRecipe, preserve_fixture_1.vowelsCounterRecipe];
describe("preserve()", () => {
    it("preserves via a single recipe", async () => {
        const events = await iter_tools_1.asyncToArray(preserve_1.preserve({
            request: { recipe: preserve_fixture_1.vowelsRecipe },
            recipes,
        }));
        expect(events).toEqual(preserve_fixture_1.expectedEventsForVowelsRecipe);
    });
    it("preserves via a recipe that depends on another recipe", async () => {
        const allEvents = await iter_tools_1.asyncToArray(preserve_1.preserve({
            request: { recipe: preserve_fixture_1.vowelsCounterRecipe },
            recipes,
        }));
        const relevantEvents = allEvents.filter(({ scope }) => scope[0] === "vowels-counter-recipe");
        expect(relevantEvents).toEqual(preserve_fixture_1.expectedEventsForVowelsCounterRecipe);
    });
    it("throws when no recipe dependency path can be found", async () => {
        const incompleteRecipes = [...recipes];
        incompleteRecipes.shift();
        const throwingCall = iter_tools_1.asyncToArray(preserve_1.preserve({
            request: { recipe: preserve_fixture_1.vowelsRecipe },
            recipes: incompleteRecipes,
        }));
        await expect(throwingCall).rejects.toThrow('No plugins found that output the label "string".');
    });
});
//# sourceMappingURL=preserve.test.js.map
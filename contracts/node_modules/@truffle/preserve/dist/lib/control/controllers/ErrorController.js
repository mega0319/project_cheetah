"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorController = void 0;
const types_1 = require("../types");
const BaseController_1 = require("./BaseController");
const decorators_1 = require("./decorators");
class ErrorController extends BaseController_1.BaseController {
    constructor(options) {
        const { parent, ...superOptions } = options;
        super(superOptions);
        this.children = [];
        if (parent) {
            this.parent = parent;
        }
        // so we can pass these around as functions
        this.fail = this.fail.bind(this);
        this.abort = this.abort.bind(this);
        this.stop = this.stop.bind(this);
    }
    async *fail({ error, cascade = true } = {}) {
        // stop all children
        for (const child of this.children) {
            yield* child.stop();
        }
        yield this.emit({
            type: "fail",
            error
        });
        this._state = types_1.State.Error;
        // propagate to parent
        if (this.parent && cascade) {
            yield* this.parent.abort({ cascade });
        }
    }
    async *abort({ cascade = true } = {}) {
        // stop all children
        for (const child of this.children) {
            yield* child.stop();
        }
        yield this.emit({
            type: "abort"
        });
        this._state = types_1.State.Error;
        // propagate to parent
        if (this.parent && cascade) {
            yield* this.parent.abort({ cascade });
        }
    }
    async *stop({} = {}) {
        // stop all children
        for (const child of this.children) {
            yield* child.stop();
        }
        yield this.emit({
            type: "stop"
        });
    }
}
__decorate([
    decorators_1.validStates([types_1.State.Active])
], ErrorController.prototype, "fail", null);
__decorate([
    decorators_1.validStates([types_1.State.Active])
], ErrorController.prototype, "abort", null);
__decorate([
    decorators_1.validStates([types_1.State.Active]),
    decorators_1.transitionToState(types_1.State.Error)
], ErrorController.prototype, "stop", null);
exports.ErrorController = ErrorController;
//# sourceMappingURL=ErrorController.js.map
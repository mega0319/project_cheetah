"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepsController = void 0;
const ErrorController_1 = require("./ErrorController");
const ValueResolutionController_1 = require("./ValueResolutionController");
const types_1 = require("../types");
const decorators_1 = require("./decorators");
class StepsController extends ErrorController_1.ErrorController {
    constructor(options) {
        const { ...superOptions } = options;
        super(superOptions);
        // so we can pass these around as functions
        this.begin = this.begin.bind(this);
        this.succeed = this.succeed.bind(this);
        this.update = this.update.bind(this);
        this.declare = this.declare.bind(this);
        this.step = this.step.bind(this);
    }
    async *begin() {
        yield this.emit({
            type: "begin"
        });
    }
    async *succeed({ result, message } = {}) {
        yield this.emit({
            type: "succeed",
            result,
            message
        });
    }
    async *update({ message }) {
        yield this.emit({
            type: "update",
            message
        });
    }
    async *declare({ identifier, message }) {
        const parent = this;
        const child = new ValueResolutionController_1.ValueResolutionController({
            scope: [...this.scope, identifier],
            parent,
            state: types_1.State.Active
        });
        this.children.push(child);
        yield child.emit({
            type: "declare",
            message: message || identifier
        });
        return child;
    }
    async *step({ identifier, message }) {
        const parent = this;
        const child = new StepsController({
            scope: [...this.scope, identifier || message],
            parent,
            state: types_1.State.Active
        });
        this.children.push(child);
        yield child.emit({
            type: "step",
            message: message || identifier
        });
        return child;
    }
}
__decorate([
    decorators_1.validStates([types_1.State.Pending]),
    decorators_1.transitionToState(types_1.State.Active)
], StepsController.prototype, "begin", null);
__decorate([
    decorators_1.validStates([types_1.State.Active]),
    decorators_1.transitionToState(types_1.State.Done)
], StepsController.prototype, "succeed", null);
__decorate([
    decorators_1.validStates([types_1.State.Active])
], StepsController.prototype, "update", null);
__decorate([
    decorators_1.validStates([types_1.State.Active])
], StepsController.prototype, "declare", null);
__decorate([
    decorators_1.validStates([types_1.State.Active])
], StepsController.prototype, "step", null);
exports.StepsController = StepsController;
//# sourceMappingURL=StepsController.js.map
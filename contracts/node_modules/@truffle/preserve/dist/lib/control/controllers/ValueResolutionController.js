"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueResolutionController = void 0;
const types_1 = require("../types");
const decorators_1 = require("./decorators");
const ErrorController_1 = require("./ErrorController");
class ValueResolutionController extends ErrorController_1.ErrorController {
    constructor(options) {
        const { ...superOptions } = options;
        super(superOptions);
        // so we can pass these around as functions
        this.resolve = this.resolve.bind(this);
        this.extend = this.extend.bind(this);
    }
    async *update({ payload } = {}) {
        yield this.emit({
            type: "update",
            payload
        });
    }
    async *resolve({ resolution, payload } = {}) {
        yield this.emit({
            type: "resolve",
            resolution,
            payload
        });
    }
    async *extend({ identifier, message }) {
        const parent = this;
        const child = new ValueResolutionController({
            scope: [...this.scope, identifier],
            parent,
            state: types_1.State.Active
        });
        this.children.push(child);
        yield child.emit({
            type: "declare",
            message: message || identifier
        });
        return child;
    }
}
__decorate([
    decorators_1.validStates([types_1.State.Active])
], ValueResolutionController.prototype, "update", null);
__decorate([
    decorators_1.validStates([types_1.State.Active]),
    decorators_1.transitionToState(types_1.State.Done)
], ValueResolutionController.prototype, "resolve", null);
__decorate([
    decorators_1.validStates([types_1.State.Active])
], ValueResolutionController.prototype, "extend", null);
exports.ValueResolutionController = ValueResolutionController;
//# sourceMappingURL=ValueResolutionController.js.map
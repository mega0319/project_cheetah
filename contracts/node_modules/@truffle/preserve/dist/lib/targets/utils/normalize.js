"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalize = void 0;
const Common = __importStar(require(".."));
const normalize = (target) => {
    const source = normalizeSource(target.source);
    return { source };
};
exports.normalize = normalize;
const normalizeSource = (source) => {
    if (Common.Sources.isContainer(source)) {
        return normalizeContainer(source);
    }
    return normalizeContent(source);
};
const normalizeContainer = (container) => {
    const entries = normalizeEntries(container.entries);
    return { entries };
};
const normalizeEntries = async function* (entries) {
    for await (const entry of entries) {
        yield normalizeEntry(entry);
    }
};
const normalizeEntry = (entry) => {
    const { path } = entry;
    const source = normalizeSource(entry.source);
    return { path, source };
};
const normalizeContent = (content) => {
    if (Common.Sources.Contents.isString(content)) {
        return normalizeString(content);
    }
    if (Common.Sources.Contents.isBytes(content)) {
        return normalizeBytes(content);
    }
    if (Common.Sources.Contents.isIterable(content)) {
        return normalizeIterable(content);
    }
    if (Common.Sources.Contents.isAsyncIterable(content)) {
        return normalizeAsyncIterable(content);
    }
};
const normalizeString = (content) => {
    return (async function* () {
        yield Buffer.from(content);
    })();
};
const normalizeBytes = (content) => {
    return (async function* () {
        yield Buffer.from(content);
    })();
};
const normalizeIterable = (content) => {
    return (async function* () {
        for (const bytes of content) {
            yield Buffer.from(bytes);
        }
    })();
};
const normalizeAsyncIterable = (content) => {
    return (async function* () {
        for await (const bytes of content) {
            yield Buffer.from(bytes);
        }
    })();
};
//# sourceMappingURL=normalize.js.map
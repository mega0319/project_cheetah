"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proposeStorageDeal = void 0;
const chalk_1 = __importDefault(require("chalk"));
const cids_1 = __importDefault(require("cids"));
async function* proposeStorageDeal(options) {
    const { cid, client, storageDealOptions, miners, controls } = options;
    const { walletAddress, epochPrice, duration } = storageDealOptions;
    const { step } = controls;
    const task = yield* step({
        message: "Proposing storage deal..."
    });
    const dealCidResolution = yield* task.declare({
        identifier: "Deal CID"
    });
    const wallet = walletAddress || await client.wallet.getDefaultAddress();
    // TODO: Allow making a deal with multiple miners
    const storageProposal = {
        Data: {
            TransferType: "graphsync",
            Root: { "/": cid.toString() }
        },
        Wallet: wallet,
        Miner: miners[0],
        EpochPrice: epochPrice,
        MinBlocksDuration: duration
    };
    try {
        const result = await client.client.startDeal(storageProposal);
        const dealCid = new cids_1.default(result["/"]);
        yield* dealCidResolution.resolve({
            resolution: dealCid,
            payload: chalk_1.default.bold(dealCid.toString())
        });
        yield* task.succeed();
        return { dealCid };
    }
    catch (error) {
        yield* task.fail({ error });
    }
}
exports.proposeStorageDeal = proposeStorageDeal;
//# sourceMappingURL=storage.js.map
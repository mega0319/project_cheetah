"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDealState = exports.getDealInfo = exports.wait = void 0;
const dealstates_1 = require("./dealstates");
const delay_1 = __importDefault(require("delay"));
async function* wait(options) {
    const { client, dealCid, controls } = options;
    const { step } = controls;
    const task = yield* step({
        message: "Waiting for deal to finish..."
    });
    const state = yield* task.declare({ identifier: "Deal State" });
    try {
        yield* waitForDealToFinish(dealCid, client, state);
        yield* task.succeed();
    }
    catch (error) {
        yield* task.fail({ error });
    }
}
exports.wait = wait;
async function getDealInfo(dealCid, client) {
    const dealCidParameter = {
        "/": dealCid.toString()
    };
    const dealInfo = await client.client.getDealInfo(dealCidParameter);
    return dealInfo;
}
exports.getDealInfo = getDealInfo;
async function getDealState(dealInfo, client) {
    const dealState = await client.client.getDealStatus(dealInfo.State);
    return dealState;
}
exports.getDealState = getDealState;
async function* waitForDealToFinish(dealCid, client, task) {
    const maxRetries = 600;
    const intervalSeconds = 1;
    for (let retries = 0; retries < maxRetries; retries++) {
        await delay_1.default(intervalSeconds * 1000);
        const dealInfo = await getDealInfo(dealCid, client);
        const state = await getDealState(dealInfo, client);
        yield* task.update({ payload: state });
        if (state === "StorageDealActive") {
            yield* task.resolve({
                resolution: state,
                payload: state
            });
            return;
        }
        if (dealstates_1.terminalStates.includes(state)) {
            yield* task.resolve({
                resolution: state,
                payload: state
            });
            throw new Error(`Deal failed: ${dealInfo.Message}`);
        }
    }
    throw new Error(`Could not finish deal within ${maxRetries * intervalSeconds} seconds`);
}
//# sourceMappingURL=wait.js.map